name: Standard CI

on:
  workflow_call:
    inputs:
      runs-on:
        required: true
        type: string

permissions:
  contents: read

concurrency:
  group: std-${{ github.workflow }}-${{ github.ref }}-${{ inputs.runs-on }}
  cancel-in-progress: true

jobs:
  discover:
    env:
      # use local flake so we can dirty the tree
      flake_file: "./flake.nix"
      flake_url: "."
    outputs:
      hits: ${{ steps.discovery.outputs.hits }}

    runs-on: ${{ inputs.runs-on }}
    steps:
      - uses: actions/checkout@v3
      - uses: blaggacao/nix-quick-install-action@detect-nix-flakes-config
        with:
          nix_conf: experimental-features = nix-command flakes
      - name: Update subflake references
        run: |
          # create the store path of
          nix store add-path --name source .
          # update the subflake lockfile to the (now existing) store path
          # set lastModified to 1 because unknown issues in the GH action environment
          (cd ./src/local && nix flake lock --update-input std && (
            jq '.nodes.std.locked.lastModified = 1' flake.lock > flake.lock.new && rm flake.lock && mv flake.lock.new flake.lock
          ) && git add -f flake.lock)
          (cd ./src/tests && nix flake lock --update-input std && (
            jq '.nodes.std.locked.lastModified = 1' flake.lock > flake.lock.new && rm flake.lock && mv flake.lock.new flake.lock
          ) &&git add -f flake.lock)
          # continue normally ...
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - name: Standard Discovery
        uses: divnix/std-action/discover@main
        id: discovery

  cli:
    needs: [discover, tests]
    if: fromJSON(needs.discover.outputs.hits).cli.build != '{}'
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.discover.outputs.hits).cli.build }}
    name: ${{ matrix.target.jobName }}
    runs-on: ${{ inputs.runs-on }}
    steps:
      - uses: blaggacao/nix-quick-install-action@detect-nix-flakes-config
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: divnix/std-action/run@main

  shells:
    needs: [discover, tests]
    if: fromJSON(needs.discover.outputs.hits).shells.build != '{}'
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.discover.outputs.hits).shells.build }}
    name: ${{ matrix.target.jobName }}
    runs-on: ${{ inputs.runs-on }}
    steps:
      - uses: blaggacao/nix-quick-install-action@detect-nix-flakes-config
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: divnix/std-action/run@main

  tests:
    needs: discover
    if: fromJSON(needs.discover.outputs.hits).checks.check != '{}'
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.discover.outputs.hits).checks.check }}
    name: ${{ matrix.target.jobName }}
    runs-on: ${{ inputs.runs-on }}
    steps:
      - uses: blaggacao/nix-quick-install-action@detect-nix-flakes-config
      - uses: actions/checkout@v3
      - name: Update subflake references
        run: |
          # create the store path of
          nix store add-path --name source .
          # update the subflake lockfile to the (now existing) store path
          # set lastModified to 1 because unknown issues in the GH action environment
          (cd ./src/local && nix flake lock --update-input std && (
            jq '.nodes.std.locked.lastModified = 1' flake.lock > flake.lock.new && rm flake.lock && mv flake.lock.new flake.lock
          ) && git add -f flake.lock)
          (cd ./src/tests && nix flake lock --update-input std && (
            jq '.nodes.std.locked.lastModified = 1' flake.lock > flake.lock.new && rm flake.lock && mv flake.lock.new flake.lock
          ) &&git add -f flake.lock)
          # continue normally ...
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: divnix/std-action/run@main
