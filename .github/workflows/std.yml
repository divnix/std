name: 'Standard CI'

on:
  workflow_call:
    inputs:
      runs-on:
        required: true
        type: string

permissions:
  contents: read

jobs:
  discovery: # make sure the action works on a clean machine without building
    runs-on: ${{ inputs.runs-on }}
    steps:
      # Configure Nix
      - uses: nixbuild/nix-quick-install-action@v22
        with:
          nix_conf: |
            experimental-features = nix-command flakes
            accept-flake-config = true
            trusted-users = runner
            access-tokens = github.com=${{ github.token }}

      - name: Detect current system
        id: system
        run: 'printf "currentSystem=$(nix eval --raw --impure --expr builtins.currentSystem)" >> "$GITHUB_OUTPUT"'

      - uses: actions/checkout@v3
      - name: Update subflake references
        run: |
          # create the store path of
          nix store add-path --name source .
          # update the subflake lockfile to the (now existing) store path
          # set lastModified to 1 because unknown issues in the GH action environment
          (cd ./src/local && nix flake lock --update-input std && (
            jq '.nodes.std.locked.lastModified = 1' flake.lock > flake.lock.new && rm flake.lock && mv flake.lock.new flake.lock
          ) && git add -f flake.lock)
          (cd ./src/tests && nix flake lock --update-input std && (
            jq '.nodes.std.locked.lastModified = 1' flake.lock > flake.lock.new && rm flake.lock && mv flake.lock.new flake.lock
          ) &&git add -f flake.lock)
          # continue normally ...

      - uses: DeterminateSystems/magic-nix-cache-action@main
      # Execute Discovery. It will schedule builds on `worker` job below
      - uses: DevPalace/phoenix-ci/discovery@v1.1
        id: discovery
        with:
          # Attribute paths to search for targets
          attrPaths: __std.ci.${{ steps.system.outputs.currentSystem }}
          flake: "." # we use checkout and update the subflakes

          # Disable caching since discovery does not do much most of the time
          nixStoreCachingEnabled: false
          nixEvalCacheCachingEnabled: true
    outputs:
      hits: ${{ steps.discovery.outputs.hits }}


  worker:
    name: "//${{ matrix.target.cell }}/${{ matrix.target.block }}/${{ matrix.target.name }}:${{ matrix.target.action }}"
    needs: [discovery]
    runs-on: ${{ inputs.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJSON(needs.discovery.outputs.hits) }}
    steps:
      # Configure Nix
      - uses: nixbuild/nix-quick-install-action@v22
        with:
          nix_conf: |
            experimental-features = nix-command flakes
            accept-flake-config = true
            trusted-users = runner
            access-tokens = github.com=${{ github.token }}

      - uses: actions/checkout@v3
      - name: Update subflake references
        run: |
          # create the store path of
          nix store add-path --name source .
          # update the subflake lockfile to the (now existing) store path
          # set lastModified to 1 because unknown issues in the GH action environment
          (cd ./src/local && nix flake lock --update-input std && (
            jq '.nodes.std.locked.lastModified = 1' flake.lock > flake.lock.new && rm flake.lock && mv flake.lock.new flake.lock
          ) && git add -f flake.lock)
          (cd ./src/tests && nix flake lock --update-input std && (
            jq '.nodes.std.locked.lastModified = 1' flake.lock > flake.lock.new && rm flake.lock && mv flake.lock.new flake.lock
          ) &&git add -f flake.lock)
          # continue normally ...

      - uses: DeterminateSystems/magic-nix-cache-action@main
      # Executes builds per each found target in discovery
      - uses: DevPalace/phoenix-ci/worker@v1.1
        id: worker
        with:
          target: ${{ toJSON(matrix.target) }}
          flake: "." # we use checkout and update the subflake
